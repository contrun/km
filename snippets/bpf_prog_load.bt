// The struct fields are copied from
// https://github.com/torvalds/linux/blob/ed4643521e6af8ab8ed1e467630a85884d2696cf/include/uapi/linux/bpf.h#L1314-L1349
// __aligned_u64 is changed to __u64.
struct BpfProgAttr { /* anonymous struct used by BPF_PROG_LOAD command */
  __u32   prog_type;  /* one of enum bpf_prog_type */
  __u32   insn_cnt;
  __u64   insns;
  __u64   license;
  __u32   log_level;  /* verbosity level of verifier */
  __u32   log_size; /* size of user buffer */
  __u64   log_buf;  /* user supplied buffer */
  __u32   kern_version; /* not used */
  __u32   prog_flags;
  char    prog_name[16u];
  __u32   prog_ifindex; /* ifindex of netdev */
};

// bpf_prog_load's signature is
// static int bpf_prog_load(union bpf_attr *attr, bpfptr_t uattr)
kprobe:bpf_prog_load {
  printf("bpf_prog_load\n");
  $ptr = (struct BpfProgAttr *) arg0;
  printf("pid: %d\n", pid);
  printf("comm: %s\n", comm);
  printf("attr address: %p\n", $ptr);
  printf("instruction size: %d\n", $ptr->insn_cnt);
  printf("instruction address: %p\n", $ptr->insns);
  printf("prog name: %s\n", $ptr->prog_name);
  printf("prog type: %d\n", $ptr->prog_type);
  printf("prog index: %d\n", $ptr->prog_ifindex);
  printf("\n")
}

// This bpftrace snippet does not seem to work.
// bpf_sys_bpf is the bpf syscall, whose signature is
// BPF_CALL_3(bpf_sys_bpf, int, cmd, void *, attr, u32, attr_size)
kprobe:bpf_sys_bpf {
  // 3 is BPF_PROG_LOAD
  if (arg0 == 3) {
    printf("bpf_sys_bpf\n");
    $ptr = (struct BpfProgAttr *) arg1;
    printf("pid: %d\n", pid);
    printf("comm: %s\n", comm);
    printf("attr address: %p\n", $ptr);
    printf("instruction size: %d\n", $ptr->insn_cnt);
    printf("instruction address: %p\n", $ptr->insns);
    printf("prog name: %s\n", $ptr->prog_name);
    printf("prog type: %d\n", $ptr->prog_type);
    printf("prog index: %d\n", $ptr->prog_ifindex);
    printf("\n")
  }
}
