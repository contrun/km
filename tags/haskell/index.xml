<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>haskell on wiki</title><link>https://wiki.cont.run/tags/haskell/</link><description>Recent content in haskell on wiki</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://wiki.cont.run/tags/haskell/index.xml" rel="self" type="application/rss+xml"/><item><title>quine in haskell</title><link>https://wiki.cont.run/quine-in-haskell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.cont.run/quine-in-haskell/</guid><description>See How to make compressed file quines, step by step
#!/usr/bin/env stack -- stack --resolver lts-15.01 script module Main where import Data.List (intercalate) main :: IO () main = putStr $ (unlines prefix) ++ (getPrefixDef prefix) where getPrefixDef list = (&amp;#34; prefix =\n [\n &amp;#34;) ++ (intercalate &amp;#34;,\n &amp;#34; (map show list)) ++ &amp;#34;\n ]&amp;#34; prefix = [ &amp;#34;#!/usr/bin/env stack&amp;#34;, &amp;#34;-- stack --resolver lts-15.01 script&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;module Main where&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;import Data.</description></item></channel></rss>