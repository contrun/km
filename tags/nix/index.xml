<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>nix on wiki</title><link>https://wiki.cont.run/tags/nix/</link><description>Recent content in nix on wiki</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://wiki.cont.run/tags/nix/index.xml" rel="self" type="application/rss+xml"/><item><title>kernel development with nix</title><link>https://wiki.cont.run/kernel-development-with-nix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.cont.run/kernel-development-with-nix/</guid><description>See also Kernel Debugging with QEMU.
This nix file should be placed in the root directory of kernel source code.
{ system ? builtins.currentSystem , configuration ? null , nixpkgs ? import &amp;lt;nixpkgs&amp;gt; { } , extraConfigFile ? &amp;#34;config&amp;#34; , ... }@args: with nixpkgs.pkgs; let buildLinuxArgs = builtins.removeAttrs args [ &amp;#34;system&amp;#34; &amp;#34;configuration&amp;#34; &amp;#34;nixpkgs&amp;#34; &amp;#34;extraConfigFile&amp;#34; ]; makeKernelVersion = src: stdenvNoCC.mkDerivation { name = &amp;#34;my-kernel-version&amp;#34;; inherit src; phases = &amp;#34;installPhase&amp;#34;; # make kernelversion also works.</description></item><item><title>LD_PRELOAD pitfalls</title><link>https://wiki.cont.run/ld_preload-pitfalls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.cont.run/ld_preload-pitfalls/</guid><description>LD_PRELOAD is a great hack. I recently encountered a strange error while generating compile_commands.json with rizsotto/Bear. Guess what, the culprit is LD_PRELOAD.
A strange error I was trying to hack on nix. Following nix&amp;rsquo;s official instructions, I started a nix shell with nix develop in which we have all the building dependencies (with their versions locked) for nix. I attempted to generate compile_commands.json for my language server clangd by running bear -- make.</description></item><item><title>self-hosted infrastructure</title><link>https://wiki.cont.run/self-hosted-infrastructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.cont.run/self-hosted-infrastructure/</guid><description>TLDR: I use tailscale/zerotier to establish a smallish mesh network. I use envoy (not anymore, I now use nginx) as an edge router to forward L4 traffic. I mainly provision and manage services with nix, docker and sops. When it is absolutely required, I use k3s to deploy Kubernetes services. Traefik is used for routing, and authelia is used for blocking unauthorized access. To multiplexing protocols with a single port, I use aioproxy.</description></item></channel></rss>