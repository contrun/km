<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on wiki</title><link>https://wiki.cont.run/tags/rust/</link><description>Recent content in rust on wiki</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://wiki.cont.run/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>lowering async await in rust</title><link>https://wiki.cont.run/lowering-async-await-in-rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.cont.run/lowering-async-await-in-rust/</guid><description>We have a simple program (playground link) built with rust&amp;rsquo;s async/await feature.
usetokio::time::{sleep,Duration};#[tokio::main]asyncfn main(){sleep(Duration::from_secs(1)).await;}We want to understand all the magic rust compiler did to make this come to life. Here are a few references:
generators - The Rust Unstable Book 2033-experimental-coroutines - The Rust RFC Book 2394-async_await - The Rust RFC Book Stackless coroutines Generator support Asynchronous Programming in Rust Below (adapted from here) is roughly how rust compiler compiles the rust source code into machine code.</description></item></channel></rss>