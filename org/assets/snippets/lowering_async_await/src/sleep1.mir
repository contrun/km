fn main::{closure#0}(_1: Pin<&mut [static generator@src/main.rs:4:17: 6:2]>, _2: ResumeTy) -> GeneratorState<(), ()> {
    debug _task_context => _18;          // in scope 0 at src/main.rs:4:17: 6:2
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at src/main.rs:4:17: 6:2
    let mut _3: tokio::time::Sleep;      // in scope 0 at src/main.rs:5:34: 5:40
    let mut _4: tokio::time::Sleep;      // in scope 0 at src/main.rs:5:5: 5:34
    let mut _5: std::time::Duration;     // in scope 0 at src/main.rs:5:11: 5:33
    let mut _6: std::task::Poll<()>;     // in scope 0 at src/main.rs:5:34: 5:40
    let mut _7: std::pin::Pin<&mut tokio::time::Sleep>; // in scope 0 at src/main.rs:5:34: 5:40
    let mut _8: &mut tokio::time::Sleep; // in scope 0 at src/main.rs:5:34: 5:40
    let mut _9: &mut tokio::time::Sleep; // in scope 0 at src/main.rs:5:34: 5:40
    let mut _10: &mut std::task::Context; // in scope 0 at src/main.rs:5:34: 5:40
    let mut _11: &mut std::task::Context; // in scope 0 at src/main.rs:5:34: 5:40
    let mut _12: std::future::ResumeTy;  // in scope 0 at src/main.rs:5:34: 5:40
    let mut _13: isize;                  // in scope 0 at src/main.rs:5:34: 5:40
    let mut _15: std::future::ResumeTy;  // in scope 0 at src/main.rs:5:34: 5:40
    let mut _16: ();                     // in scope 0 at src/main.rs:5:34: 5:40
    let mut _17: ();                     // in scope 0 at src/main.rs:4:17: 6:2
    let mut _18: std::future::ResumeTy;  // in scope 0 at src/main.rs:4:17: 6:2
    let mut _19: u32;                    // in scope 0 at src/main.rs:4:17: 6:2
    scope 1 {
        debug pinned => (((*(_1.0: &mut [static generator@src/main.rs:4:17: 6:2])) as variant#3).0: tokio::time::Sleep); // in scope 1 at src/main.rs:5:34: 5:40
        let _14: ();                     // in scope 1 at src/main.rs:5:34: 5:40
        scope 2 {
        }
        scope 3 {
            debug result => _14;         // in scope 3 at src/main.rs:5:34: 5:40
        }
    }

    bb0: {
        _19 = discriminant((*(_1.0: &mut [static generator@src/main.rs:4:17: 6:2]))); // scope 0 at src/main.rs:4:17: 6:2
        switchInt(move _19) -> [0_u32: bb1, 1_u32: bb17, 2_u32: bb16, 3_u32: bb15, otherwise: bb18]; // scope 0 at src/main.rs:4:17: 6:2
    }

    bb1: {
        _18 = move _2;                   // scope 0 at src/main.rs:4:17: 6:2
        _5 = Duration::from_secs(const 1_u64) -> [return: bb2, unwind: bb14]; // scope 0 at src/main.rs:5:11: 5:33
                                         // mir::Constant
                                         // + span: src/main.rs:5:11: 5:30
                                         // + literal: Const { ty: fn(u64) -> std::time::Duration {std::time::Duration::from_secs}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _4 = tokio::time::sleep(move _5) -> [return: bb3, unwind: bb14]; // scope 0 at src/main.rs:5:5: 5:34
                                         // mir::Constant
                                         // + span: src/main.rs:5:5: 5:10
                                         // + literal: Const { ty: fn(std::time::Duration) -> tokio::time::Sleep {tokio::time::sleep}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _3 = <Sleep as IntoFuture>::into_future(move _4) -> [return: bb4, unwind: bb14]; // scope 0 at src/main.rs:5:34: 5:40
                                         // mir::Constant
                                         // + span: src/main.rs:5:34: 5:40
                                         // + literal: Const { ty: fn(tokio::time::Sleep) -> <tokio::time::Sleep as std::future::IntoFuture>::Future {<tokio::time::Sleep as std::future::IntoFuture>::into_future}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        (((*(_1.0: &mut [static generator@src/main.rs:4:17: 6:2])) as variant#3).0: tokio::time::Sleep) = move _3; // scope 0 at src/main.rs:5:34: 5:40
        goto -> bb5;                     // scope 1 at src/main.rs:5:34: 5:40
    }

    bb5: {
        _9 = &mut (((*(_1.0: &mut [static generator@src/main.rs:4:17: 6:2])) as variant#3).0: tokio::time::Sleep); // scope 2 at src/main.rs:5:34: 5:40
        _8 = &mut (*_9);                 // scope 2 at src/main.rs:5:34: 5:40
        _7 = Pin::<&mut Sleep>::new_unchecked(move _8) -> [return: bb6, unwind: bb13]; // scope 2 at src/main.rs:5:34: 5:40
                                         // mir::Constant
                                         // + span: src/main.rs:5:34: 5:40
                                         // + literal: Const { ty: unsafe fn(&mut tokio::time::Sleep) -> std::pin::Pin<&mut tokio::time::Sleep> {std::pin::Pin::<&mut tokio::time::Sleep>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _12 = _18;                       // scope 2 at src/main.rs:5:34: 5:40
        _11 = get_context(move _12) -> [return: bb7, unwind: bb13]; // scope 2 at src/main.rs:5:34: 5:40
                                         // mir::Constant
                                         // + span: src/main.rs:5:34: 5:40
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _10 = &mut (*_11);               // scope 2 at src/main.rs:5:34: 5:40
        _6 = <Sleep as Future>::poll(move _7, move _10) -> [return: bb8, unwind: bb13]; // scope 2 at src/main.rs:5:34: 5:40
                                         // mir::Constant
                                         // + span: src/main.rs:5:34: 5:40
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut tokio::time::Sleep>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<tokio::time::Sleep as std::future::Future>::Output> {<tokio::time::Sleep as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _13 = discriminant(_6);          // scope 1 at src/main.rs:5:34: 5:40
        switchInt(move _13) -> [0_isize: bb11, 1_isize: bb9, otherwise: bb10]; // scope 1 at src/main.rs:5:34: 5:40
    }

    bb9: {
        ((_0 as Yielded).0: ()) = move _16; // scope 1 at src/main.rs:5:34: 5:40
        discriminant(_0) = 0;            // scope 1 at src/main.rs:5:34: 5:40
        discriminant((*(_1.0: &mut [static generator@src/main.rs:4:17: 6:2]))) = 3; // scope 1 at src/main.rs:5:34: 5:40
        return;                          // scope 1 at src/main.rs:5:34: 5:40
    }

    bb10: {
        unreachable;                     // scope 1 at src/main.rs:5:34: 5:40
    }

    bb11: {
        _14 = ((_6 as Ready).0: ());     // scope 1 at src/main.rs:5:34: 5:40
        drop((((*(_1.0: &mut [static generator@src/main.rs:4:17: 6:2])) as variant#3).0: tokio::time::Sleep)) -> [return: bb12, unwind: bb14]; // scope 0 at src/main.rs:5:39: 5:40
    }

    bb12: {
        _17 = const ();                  // scope 0 at src/main.rs:4:17: 6:2
        ((_0 as Complete).0: ()) = move _17; // scope 0 at src/main.rs:6:2: 6:2
        discriminant(_0) = 1;            // scope 0 at src/main.rs:6:2: 6:2
        discriminant((*(_1.0: &mut [static generator@src/main.rs:4:17: 6:2]))) = 1; // scope 0 at src/main.rs:6:2: 6:2
        return;                          // scope 0 at src/main.rs:6:2: 6:2
    }

    bb13 (cleanup): {
        drop((((*(_1.0: &mut [static generator@src/main.rs:4:17: 6:2])) as variant#3).0: tokio::time::Sleep)) -> bb14; // scope 0 at src/main.rs:5:39: 5:40
    }

    bb14 (cleanup): {
        discriminant((*(_1.0: &mut [static generator@src/main.rs:4:17: 6:2]))) = 2; // scope 0 at src/main.rs:4:17: 6:2
        resume;                          // scope 0 at src/main.rs:4:17: 6:2
    }

    bb15: {
        _15 = move _2;                   // scope 0 at src/main.rs:4:17: 6:2
        _18 = move _15;                  // scope 1 at src/main.rs:5:34: 5:40
        goto -> bb5;                     // scope 1 at src/main.rs:5:34: 5:40
    }

    bb16: {
        assert(const false, "`async fn` resumed after panicking") -> bb16; // scope 0 at src/main.rs:4:17: 6:2
    }

    bb17: {
        assert(const false, "`async fn` resumed after completion") -> bb17; // scope 0 at src/main.rs:4:17: 6:2
    }

    bb18: {
        unreachable;                     // scope 0 at src/main.rs:4:17: 6:2
    }
}
